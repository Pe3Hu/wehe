[gd_scene load_steps=7 format=3 uid="uid://bgxktlnjisoob"]

[ext_resource type="Script" path="res://entities/subject/subject.gd" id="1_5lrd8"]
[ext_resource type="Texture2D" uid="uid://dvyrrin65v5lb" path="res://entities/subject/images/ring.png" id="2_vsh0s"]

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_0uytx"]
bg_color = Color(0.723752, 0.524778, 0.693033, 1)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_v15al"]

[sub_resource type="Shader" id="Shader_wbyip"]
code = "shader_type canvas_item;
render_mode blend_premul_alpha;

uniform float Line_Smoothness : hint_range(0, 0.1) = 0.045;
uniform float Line_Width : hint_range(0, 0.2) = 0.09;
uniform float Brightness = 3.0;
uniform float Rotation_deg : hint_range(-90, 90) = 90;
uniform float Distortion : hint_range(1, 2) = 1.8;
uniform float Speed = 0.7;
uniform float Position: hint_range(-0.5, 0.5) = 0;
uniform float Position_current: hint_range(-0.5, 0.5) = 0;
uniform float Position_Min = -.5;
uniform float Position_Max = .5;
uniform float Alpha : hint_range(0, 1) = 1;
uniform float Position_Current : hint_range(-1, 1) = 1;
uniform bool Pause = false;

vec2 rotate_uv(vec2 uv, vec2 center, float rotation, bool use_degrees){
		float _angle = rotation;
		if(use_degrees){
			_angle = rotation * (3.1415926/180.0);
		}
		mat2 _rotation = mat2(
			vec2(cos(_angle), -sin(_angle)),
			vec2(sin(_angle), cos(_angle))
		);
		vec2 _delta = uv - center;
		_delta = _rotation * _delta;
		return _delta + center;
	}

void fragment() {
	vec2 center_uv = UV - vec2(0.5, 0.5);
	float gradient_to_edge = max(abs(center_uv.x), abs(center_uv.y));
	gradient_to_edge = gradient_to_edge * Distortion;
	gradient_to_edge = 1.0 - gradient_to_edge;
	vec2 rotaded_uv = rotate_uv(UV, vec2(0.5, 0.5), Rotation_deg, true);
	
	float remapped_position;
	{
		float output_range = Position_Max - Position_Min;
		remapped_position = Position_Min + output_range * Position;
	}
	
	float remapped_time = remapped_position + TIME * Speed;
	
	remapped_time = fract(remapped_time);
	{
		float output_range = 0.5 - (-0.5);
		remapped_time = -1. + output_range * remapped_time;
	}
	
	if (Pause)
		{
		remapped_time = -0.5 + Position_current;
		}
	
	vec2 offset_uv = vec2(rotaded_uv.xy) + vec2(remapped_time, 0.0);
	float line = vec3(offset_uv, 0.0).x;
	line = abs(line);
	line = gradient_to_edge * line;
	line = sqrt(line);
	
	float line_smoothness = clamp(Line_Smoothness, 0.001, 1.0);
	float offset_plus = Line_Width + line_smoothness;
	float offset_minus = Line_Width - line_smoothness;
	
	float remapped_line;
	{
		float input_range = offset_minus - offset_plus;
		remapped_line = (line - offset_plus) / input_range;
	}
	remapped_line = remapped_line * Brightness;
	remapped_line = min(remapped_line, Alpha);
	COLOR.rgb = vec3(COLOR.xyz) * vec3(remapped_line);
	COLOR.a = remapped_line;
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_1irtl"]
shader = SubResource("Shader_wbyip")
shader_parameter/Line_Smoothness = 0.0
shader_parameter/Line_Width = 0.09
shader_parameter/Brightness = 3.0
shader_parameter/Rotation_deg = 90.0
shader_parameter/Distortion = 1.8
shader_parameter/Speed = 1.0
shader_parameter/Position = -0.5
shader_parameter/Position_current = 0.0
shader_parameter/Position_Min = -0.5
shader_parameter/Position_Max = 0.5
shader_parameter/Alpha = 1.0
shader_parameter/Position_Current = 1.0
shader_parameter/Pause = false

[node name="Subject" type="PanelContainer"]
custom_minimum_size = Vector2(40, 40)
theme_override_styles/panel = SubResource("StyleBoxFlat_0uytx")
script = ExtResource("1_5lrd8")

[node name="Icon" type="TextureRect" parent="."]
material = SubResource("ShaderMaterial_v15al")
layout_mode = 2
texture = ExtResource("2_vsh0s")

[node name="Highlight" type="ColorRect" parent="."]
unique_name_in_owner = true
material = SubResource("ShaderMaterial_1irtl")
layout_mode = 2

[node name="ReloadTimer" type="Timer" parent="."]
unique_name_in_owner = true

[connection signal="timeout" from="ReloadTimer" to="." method="_on_reload_timer_timeout"]
